#!/usr/bin/env python3
"""
Usage:
       jst --help
       jst init BRANCH_CE BRANCH_PRO [SVN_USER] [options]
       jst (build|bd) [DIR] [--test] [options]
       jst deploy [DIR] [options]
       jst (start|stop|restart|ps|status|update|diff|revert|init-db) [options]
       jst svn SVN_ARGS...
       jst configure [--dbType=<dbType>] [--dbHost=<dbHost>] [--appServerType=<appServerType>] [options]

Options:
    --env=<env>      Environment
    --verbose        Verbose output

Commands:
    init        checkout ce and pro source code (as OS user by default) and configure buildomatic
    build       build jrs (run tests if --test is specified)
    deploy      deploy jrs to tomcat
    bd          run build and deploy in one command (run tests if --test is specified)
    start       start tomcat
    stop        stop tomcat
    restart     restart tomcat
    ps          show tomcat process info
    status      run 'svn status' against both source trees
    update      run 'svn update' against both source trees
    diff        run 'svn diff' against source trees
    revert      run 'svn revert -R' against both source trees
    svn         run arbitrary svn command against both source trees
    configure   change default_master.properties according to parameters
    init-db     create jasperserver, foodmart and sugarcm databases

Examples:
    jst init branches/bugfix branches/bugfix-pro anonymous
    jst init bugfix bugfix-pro anonymous
    jst init trunk trunk
    jst build ce/jasperserver-war
"""

import distutils.dir_util
import fileinput
import glob
import os
import psutil
import shutil
import socket
import subprocess
import sys
import textwrap
import time
import traceback
import urllib.request

import docopt
import getpass


_tomcat_ver = "7.0.64"

def main(args):

    # check if we are in the right directory
    if (not args["init"]):
        assert_initialized()

    if (args["init"]):
        cmd_init(args["BRANCH_CE"], args["BRANCH_PRO"], args["SVN_USER"])
    # ant/buildomatic commands
    elif (args["build"]):
        cmd_build(args["DIR"], args["--test"])
    elif (args["deploy"]):
        cmd_deploy(args["DIR"])
    elif (args["bd"]):
        cmd_build(args["DIR"], args["--test"])
        cmd_deploy(args["DIR"])
    # tomcat commands
    elif (args["start"]):
        cmd_start()
    elif (args["stop"]):
        cmd_stop()
    elif (args["restart"]):
        cmd_stop()
        cmd_start()
    elif (args["ps"]):
        cmd_ps()
    # svn commands
    elif (args["status"]):
        run_svn_command(["status"])
    elif (args["update"]):
        run_svn_command(["update"])
    elif (args["diff"]):
        run_svn_command(["diff"])
    elif (args["revert"]):
        cmd_revert()
    elif (args["svn"]):
        run_svn_command(args["SVN_ARGS"])
    # misc commands
    elif (args["configure"]):
        cmd_configure(args["--dbType"], args["--dbHost"], args["--appServerType"], )
    elif (args["init-db"]):
        cmd_init_db()
    else:
        raise ValueError("Unknown arguments:\n" + str(args))


def cmd_init(branch_ce, branch_pro, svn_user):
    """checkout source and configure buildomatic"""
    if (not svn_user):
        svn_user = getpass.getuser()
        
    svn_checkout(branch_ce, branch_pro, svn_user)
    configure_buildomatic("postgresql", "localhost", "tomcat7") # postgres is default db
    # only devs need sources so no need to tweak under any other environment
    if (env == "dev"):
        tweak_buildomatic_for_dev_env()


def cmd_build(directory, run_tests):
    args = ["ant", "-buildfile", ce_dir + "/buildomatic/build.xml"]

    if (directory):

        directory = format_path(directory)

        if (directory.startswith("ce/")):
            args += ["build-dir-ce", "-DdirName=" + directory[3:]]
        elif (directory.startswith("pro/")):
            args += ["build-dir-pro", "-DdirName=" + directory[4:]]
        else:
            raise ValueError("Unknown directory: " + directory)
    else:
        args += ["build-src-all"]

    if (not run_tests):
        args += ["-DSKIP_TEST_ARG=skipTests"]
        
    get_app_server().install()

    changed_env = ensure_java7()
    log_info("Building")
    subprocess.check_call(args, env=changed_env, stdout=subprocess_stdout)


def ensure_java7():
    # cannot compile with java 8
    process_env = os.environ.copy()
    # check if we have java 7 already
    if ("JAVA_HOME" not in process_env or not is_java7(process_env["JAVA_HOME"] + "/bin/java")):
        # a guess
        process_env["JAVA_HOME"] = "/usr/lib/jvm/java-7-oracle"
        log_info("Looking for java 7")
    # check again
    if (not is_java7(process_env["JAVA_HOME"] + "/bin/java")):
        raise IOError("java 7 is required to build source")

    return process_env

def is_java7(java_binary):
    java_output = subprocess.check_output([java_binary, "-version"],
                                          universal_newlines=True,
                                          stderr=subprocess.STDOUT)
    return ('java version "1.7.' in java_output)


def cmd_deploy(directory):
    get_app_server().install()
    if (directory):

        directory = format_path(directory)

        if (directory.endswith("-war")):
            raise ValueError("WAR deployment is not supported")

        source = os.getcwd() + "/" + directory + "/target/*.jar"
        files = glob.glob(source)
        get_app_server().deploy(files)
    else:
        args = ["ant", "-buildfile", ce_dir + "/buildomatic/build.xml", "deploy-webapp-pro"]
        log_info("Deploying")
        subprocess.check_call(args, stdout=subprocess_stdout)


def format_path(directory):
    if (directory.endswith("/")):
        directory = directory[:-1]
    return directory


def cmd_start():
    get_app_server().start()


def cmd_ps():
    get_app_server().ps()


def cmd_stop():
    get_app_server().stop()


def cmd_revert():
    # always print results even if verbose=False
    subprocess.check_call(["svn", "revert", ce_dir, "-R"])
    subprocess.check_call(["svn", "revert", pro_dir, "-R"])


def cmd_configure(db_type, db_host, app_server_type):
    configure_buildomatic(db_type, db_host, app_server_type)


def cmd_init_db():
    log_info("Initializing db")
    subprocess.check_call(["ant",
                     "create-js-db",
                     "build-js-ddl-pro",
                     "init-js-db-pro",
                     "create-sugarcrm-db",
                     "load-sugarcrm-db",
                     "create-foodmart-db",
                     "load-foodmart-db",
                     "update-foodmart-db",
                     "run-production-data-pro"],
                          cwd=ce_dir + "/buildomatic", stdout=subprocess_stdout)


def assert_initialized():
    if (not os.path.isdir(ce_dir) or not os.path.isdir(pro_dir)):
        raise IOError("Cannot find ce and pro directories. Did you run init?")


def run_svn_command(svn_args):
    subprocess.check_call(["svn"] + svn_args + [ce_dir])
    subprocess.check_call(["svn"] + svn_args + [pro_dir])


def svn_checkout(branch_ce, branch_pro, svn_user):
    """checkout source"""
    svn_url_prefix = "https://" + svn_user + "@svnserver.jaspersoft.com/jasperserver"

    if (branch_ce.startswith("https://")):
        url_ce = branch_ce
    else:
        url_ce = svn_url_prefix + "/" + normalize_branch_name(branch_ce)

    if (branch_pro.startswith("https://")):
        url_pro = branch_pro
    else:
        url_pro = svn_url_prefix + "-pro/" + normalize_branch_name(branch_pro)

    log_info("Checking out '" + url_ce + "' into 'ce'")
    subprocess.check_call(["svn", "checkout", url_ce, "ce"], stdout=subprocess_stdout)
    log_info("Checking out '" + url_pro + "' into 'pro'")
    subprocess.check_call(["svn", "checkout", url_pro, "pro"], stdout=subprocess_stdout)


def normalize_branch_name(branch):
    """ensures that branch includes branches/ unless trunk"""
    if (branch != "trunk" and not branch.startswith("branches/")):
        return "branches/" + branch

    return branch;

def configure_buildomatic(db_type, db_host, app_server_type):
    log_info("Configuring buildomatic")
    check_db_type(db_type)
    #writes default_master.properties file
    with open(ce_dir + "/buildomatic/default_master.properties", "w") as f:
        get_app_server(app_server_type).configure_buildomatic(f)
        write_db_section(f, db_type, db_host)
        write_source_section(f)

    if (db_type in supported_db_types_pro):
        copy_buildomatic_additional()


def write_db_section(f, db_type, db_host):
    if (db_host == None):
        db_host = "localhost"
        
    f.write("dbHost = " + db_host + "\n")

    if (db_type == "postgresql"):
        f.write("dbType = postgresql\n")
        f.write("dbUsername = postgres\n")
        f.write("dbPassword = postgres\n")
    elif (db_type == "mysql"):
        f.write("dbType = mysql\n")
        f.write("dbUsername = root\n")
        f.write("dbPassword = password\n")
    elif (db_type == "oracle"):
        f.write("dbType = oracle\n")
        f.write("sid = xe\n")
        f.write("dbUsername = jasperserver\n")
        f.write("dbPassword = password\n")
        f.write("sysUsername = system\n")
        f.write("sysPassword = oracle\n")
    else:
        raise ValueError("Unknown db type " + db_type)

def check_db_type(db_type):
    if (db_type not in supported_db_types):
        raise ValueError("Unknown db type " + str(db_type) + ". Supported db types are: " + str(supported_db_types))


def write_source_section(f):
    f.write("maven = /usr/local/maven/bin/mvn\n")
    f.write("mvn-mirror=http://mvnrepo.jaspersoft.com:8081/artifactory/repo\n")
    f.write("js-path = " + ce_dir + "\n")
    f.write("js-pro-path = " + pro_dir + "\n")

def copy_buildomatic_additional():
    copy(pro_dir + "/buildomatic-additional", ce_dir + "/buildomatic")


def copy(src, dst):
    distutils.dir_util.copy_tree(src, dst)


def tweak_buildomatic_for_dev_env():
    """makes maven install sources into local repository"""
    searchString = '<arg value="clean"/>'
    for line in fileinput.input(ce_dir + "/buildomatic/bin/dev.xml", inplace=True):
        if (line.strip() == searchString):
            line = line.replace(searchString, searchString + '<arg value="source:jar-no-fork"/>')
        print(line, end="")

def print_progress(count, blockSize, totalSize):
    percent = int(count * blockSize * 100 / totalSize)
    sys.stdout.write("\r%3d%%" % percent)
    sys.stdout.flush()


def check_if_db_is_up():
    """checks if db is up"""
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result = s.connect_ex((get_db_host(), get_db_port()))
    if (result != 0):
        raise IOError("DB is down")

    s.close()
    
    
def get_db_host():
    return get_buildomatic_property("dbHost")
        
    
def get_db_port():
    db_port = get_buildomatic_property("dbPort")
    if (db_port):
        return db_port

    return get_default_db_port()


def get_default_db_port():    
    db_type = get_buildomatic_property("dbType")
    check_db_type(db_type)
    db_type_to_default_port_dict = {"postgresql": 5432,
                                    "mysql": 3306,
                                    "oracle": 1521}
    return db_type_to_default_port_dict[db_type]
        
    
def get_buildomatic_property(requested_property_name):
    """reads a property from buildomatic config file"""
    with open(ce_dir + "/buildomatic/default_master.properties", 'r') as f:
        for line in f:
            if (not line.startswith("#")):
                property_name, property_value = line.split("=")
                if (property_name.strip() == requested_property_name):
                    return property_value.strip()


def get_working_environment(args):
    if (args["--env"]):
        if (args["--env"] in env_list):
            return args["--env"]
        else:
            raise ValueError("Unknown environment " + args["--env"])
    return "dev"


def get_app_server(app_server_type = None):
    if not app_server_type:
        app_server_type = get_buildomatic_property("appServerType")
    if app_server_type == "tomcat7":
        return Tomcat7AppServer()
    elif app_server_type == "skipAppServerCheck":
        return DummyAppServer()
    else:
        raise ValueError("App server not supported: " + app_server_type)


def log_error(message):
    log_color(message, color.RED, color.BRIGHT)


def log_warning(message):
    log_color(message, color.YELLOW, color.BRIGHT)


def log_debug(message):
    log_color(message, color.WHITE, color.DIM)


def log_info(message, end="\n"):
    print(str(message), end=end)


def log_color(message, fg, style):
    print("\033[" + fg + "m" + "\033[" + style + "m" + str(message) + "\033[0m")
    
class AppServer:
    
    def __init__(self, app_server_type, download_url, deployed_jrs_dir):
        self.app_server_type = app_server_type
        self.app_server_dir = os.getcwd() + "/" + self.app_server_type
        self.download_url = download_url
        self.deploy_dir = deployed_jrs_dir
    
    def configure_buildomatic(self, file):
        file.write("appServerType = " + self.app_server_type + "\n")
        file.write("appServerDir = " + self.app_server_dir + "\n")
        
    def install(self):
        file = self._download(self.download_url)
        self._extract(file)
        self._post_install()

    def _download(self, download_url):
        file = os.path.expanduser("~") + "/.cache/jst/" + download_url[download_url.rindex("/") + 1:]
        if (not os.path.isfile(file)):
            os.makedirs(os.path.dirname(file), exist_ok=True)
            log_info("Downloading app server from " + download_url)
            urllib.request.urlretrieve(download_url, file)
        
        return file
    

    def _extract(self, file):
        if (not os.path.isdir(self.app_server_dir)):
            os.makedirs(self.app_server_dir)
            log_info("Extracting app server into " + self.app_server_dir)
            if file.endswith("tar.gz"):
                subprocess.check_call(["tar", "-xf", file, "-C", self.app_server_dir, "--strip-components=1"], stdout=subprocess_stdout)
            else:
                raise ValueError("unsupported app server archive " + file)
    
    def _post_install(self):
        pass
    
    
    def deploy(self, files):
        self.install()
        for file in files:
            if not file.endswith("sources.jar"):
                shutil.copy(file, self.app_server_dir + "/" + self.deployed_jrs_dir + "/WEB-INF/lib")
                log_info("Deployed: " + file)
                
    
    def start(self):
        raise ValueError("not implemented")

    
    def ps(self):
        raise ValueError("not implemented")
    
    
    def stop(self):
        raise ValueError("not implemented")
    

class DummyAppServer(AppServer):

    def __init__(self):
        super(DummyAppServer, self).__init__("skipAppServerCheck", "", "")
        
        
    def install(self):
        pass
    
    
    def deploy(self, files):
        raise ValueError("deploy not supported for dummy server")
    
    
class Tomcat7AppServer(AppServer):
    
    def __init__(self):
        download_url = "http://www.gtlib.gatech.edu/pub/apache/tomcat/tomcat-7/v" + _tomcat_ver + "/bin/apache-tomcat-" + _tomcat_ver + ".tar.gz"
        super(Tomcat7AppServer, self).__init__("tomcat7", download_url, "webapps/jasperserver-pro")
        
    def _post_install(self):
        with open(self.app_server_dir + "/bin/setenv.sh", "w") as f:
            f.write(textwrap.dedent("""
                export CATALINA_OPTS="-agentlib:jdwp=transport=dt_socket,address=1044,server=y,suspend=n -Djavax.xml.soap.SOAPFactory=org.apache.axis.soap.SOAPFactoryImpl -Djavax.xml.transform.TransformerFactory=org.apache.xalan.processor.TransformerFactoryImpl -Djavax.xml.soap.SOAPConnectionFactory=org.apache.axis.soap.SOAPConnectionFactoryImpl -Djavax.xml.soap.MessageFactory=org.apache.axis.soap.MessageFactoryImpl -Djava.net.preferIPv4Stack=true -Xms1024m -Xmx2048m -XX:PermSize=32m -XX:MaxPermSize=512m -Xss2m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled"
            """).strip())

    def __get_pids(self):
        catalina_main_class_arg = "org.apache.catalina.startup.Bootstrap"
        catalina_home_arg = "-Dcatalina.home=" + self.app_server_dir
        pids = []
    
        for proc in psutil.process_iter():
            if (proc.name() == "java" \
                    and catalina_main_class_arg in proc.cmdline() \
                    and catalina_home_arg in proc.cmdline()):
                pids.append(str(proc.pid))
                # keep looking, might be multiple instances running
    
        return pids

    def start(self):
        pids = self.__get_pids()
        if (pids):
            log_info("Already running; pid(s): " + ", ".join(pids))
            return
    
        check_if_db_is_up()
        log_info("Starting tomcat")
        self.__execute_catalina_action("start")
        self.ps()

    def __execute_catalina_action(self, action):
        subprocess.check_call([self.app_server_dir + "/bin/catalina.sh", action],
                              stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)


    def ps(self):
        pids = self.__get_pids()
        if (pids):
            log_info("pid(s): " + ", ".join(pids))
        else:
            log_info("tomcat is down")

    def stop(self):
        pids = self.__get_pids()
        if (pids):
            self.__stop_gracefully(30)
            pids = self.__get_pids()
            if (pids):
                log_warning("Unable to stop gracefully")
                for pid in pids:
                    log_warning("killing process with pid " + pid)
                    psutil.Process(int(pid)).kill()
    
        self.ps()


    def __stop_gracefully(self, timeout):
        self.__execute_catalina_action("stop")
        log_info("Stopping tomcat", end="")
        #sys.stdout.write("Waiting for tomcat to stop")
        sys.stdout.flush()
        elapsed = 0 # number of seconds since shutdown initiated
        while (self.__get_pids() and elapsed <= timeout):
            time.sleep(1)
            elapsed += 1
            sys.stdout.write(".")
            sys.stdout.flush()
    
        print()
    

# working environment
env_list = ["dev", "ci"]
env = ""
ce_dir = os.getcwd() + "/ce"
pro_dir = os.getcwd() + "/pro"
supported_db_types_pro = ["oracle"]
supported_db_types = ["postgresql", "mysql"] + supported_db_types_pro
subprocess_stdout = None


class color:
    BLACK = "30"
    RED = "31"
    GREEN = "32"
    YELLOW = "33"
    BLUE = "34"
    MAGENTA = "35"
    CYAN = "36"
    WHITE = "37"
    BRIGHT = "1"
    DIM = "2"
    NORMAL = "22"
    RESET_ALL = "0"

if (__name__ == "__main__"):

    args = docopt.docopt(__doc__, version="0.1")

    if (not args["--verbose"]):
        subprocess_stdout = open("jst.log", "a+")

    env = get_working_environment(args)

    try:
        main(args)
    except Exception as e:
        log_error(e)
        if (args["--verbose"]):
            traceback.print_exc()
        exit(1)
    finally:
        if (subprocess_stdout):
            subprocess_stdout.close()
