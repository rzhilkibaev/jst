#!/usr/bin/env python3
"""
Usage: 
       jst init BRANCH_CE BRANCH_PRO [SVN_USER] [--env=<env>]
       jst (build|bd) [DIR] [--test] [--env=<env>]
       jst deploy [DIR] [--env=<env>]
       jst (start|stop|restart|ps|log|go|status|update|diff|revert|init-db) [--env=<env>]
       jst svn SVN_ARGS...
       jst configure --db=<db> [--env=<env>]
       
Commands:
    init        checkout ce and pro source code and configure buildomatic
    build       build jrs (run tests if --test is specified)
    deploy      deploy jrs to tomcat
    bd          run build and deploy in one command (run tests if --test is specified)
    start       start tomcat 
    stop        stop tomcat
    restart     restart tomcat
    ps          show tomcat process info
    log         print tomcat catalina.out
    go          open app in default web browser 
    status      run 'svn status' against both source trees
    update      run 'svn update' against both source trees
    diff        run 'svn diff' against source trees
    revert      run 'svn revert -R' against both source trees
    svn         run arbitrary svn command against both source trees
    configure   change default_master.properties according to parameters
    init-db     create jasperserver, foodmart and sugarcm databases
    
Examples:
    jst init anonymous branches/bugfix branches/bugfix-pro
    jst init anonymous trunk trunk
    jst build ce/jasperserver-war
"""

import docopt
import fileinput
import glob
import os
import psutil
import shutil
import socket
import subprocess
import sys
import textwrap
import time
import urllib.request


_tomcat_ver = "7.0.64"

def main(args):

    # check if we are in the right directory
    if (not args["init"] and not args["go"]):
        assert_initialized()

    if (args["init"]):
        cmd_init(args["BRANCH_CE"], args["BRANCH_PRO"], args["SVN_USER"])
    # ant/buildomatic commands
    elif (args["build"]):
        cmd_build(args["DIR"], args["--test"])
    elif (args["deploy"]):
        cmd_deploy(args["DIR"])
    elif (args["bd"]):
        cmd_build(args["DIR"], args["--test"])
        cmd_deploy(args["DIR"])
    # tomcat commands
    elif (args["start"]):
        cmd_start()
    elif (args["stop"]):
        cmd_stop()
    elif (args["restart"]):
        cmd_stop()
        cmd_start()
    elif (args["ps"]):
        cmd_ps()
    elif (args["log"]):
        cmd_log()
    # svn commands
    elif (args["status"]):
        run_svn_command(["status"])
    elif (args["update"]):
        run_svn_command(["update"])
    elif (args["diff"]):
        run_svn_command(["diff"])
    elif (args["revert"]):
        cmd_revert()
    elif (args["svn"]):
        run_svn_command(args["SVN_ARGS"])
    # misc commands
    elif (args["go"]):
        cmd_go()
    elif (args["configure"]):
        cmd_configure(args["--db"])
    elif (args["init-db"]):
        cmd_init_db()
    else:
        raise ValueError("Unknown arguments:\n" + str(args))


def cmd_init(branch_ce, branch_pro, svn_user):
    """checkout source and configure buildomatic"""
    if (not svn_user):
        svn_user = "anonymous"

    svn_checkout(branch_ce, branch_pro, svn_user)
    configure_buildomatic("pg") # postgres is default db
    # only devs need sources so no need to tweak under any other environment
    if (env == "dev"):
        tweak_buildomatic_for_dev_env()


def cmd_build(directory, run_tests):
    if (env == "dev"):
        ensure_tomcat()

    args = ["ant", "-buildfile", ce_dir + "/buildomatic/build.xml"]

    if (directory):

        directory = format_path(directory)

        if (directory.startswith("ce/")):
            args += ["build-dir-ce", "-DdirName=" + directory[3:]]
        elif (directory.startswith("pro/")):
            args += ["build-dir-pro", "-DdirName=" + directory[4:]]
        else:
            raise ValueError("Unknown directory: " + directory)
    else:
        args += ["build-src-all"]

    if (not run_tests):
        args += ["-DSKIP_TEST_ARG=skipTests"]

    subprocess.check_call(args)


def cmd_deploy(directory):
    if (env == "dev"):
        ensure_tomcat()

    if (directory):

        directory = format_path(directory)

        if (directory.endswith("-war")):
            raise ValueError("WAR deployment is not supported")

        source = os.getcwd() + "/" + directory + "/target/*.jar"
        files = glob.glob(source)
        destination = tomcat_home + "/webapps/jasperserver-pro/WEB-INF/lib/"
        deployed = False

        for file in files:
            if (not file.endswith("sources.jar")):
                shutil.copy(file, destination)
                print("Deployed: " + file)
                deployed = True

        if (not deployed):
            raise IOError("Nothing to deploy at: " + source)
    else:
        args = ["ant", "-buildfile", ce_dir + "/buildomatic/build.xml", "deploy-webapp-pro"]
        subprocess.check_call(args)


def format_path(directory):
    if (directory.endswith("/")):
        directory = directory[:-1]
    return directory


def cmd_start():
    pids = get_tomcat_pids()
    if (pids):
        print("Already running; pid(s): " + ", ".join(pids))
        return

    check_db()
    execute_catalina_action("start")
    cmd_ps()


def cmd_stop():
    pids = get_tomcat_pids()
    if (pids):
        stop_gracefully(30)
        pids = get_tomcat_pids()
        if (pids):
            print("Unable to stop gracefully")
            for pid in pids:
                print("killing process with pid " + pid)
                psutil.Process(int(pid)).kill()

    cmd_ps()


def cmd_ps():
    pids = get_tomcat_pids()
    if (pids):
        print("pid(s): " + ", ".join(pids))
    else:
        print("tomcat is down")


def cmd_log():
    with open(tomcat_home + "/logs/catalina.out", 'r') as fin:
        print(fin.read())


def cmd_revert():
    subprocess.check_call(["svn", "revert", ce_dir, "-R"])
    subprocess.check_call(["svn", "revert", pro_dir, "-R"])


def cmd_go():
    pids = get_tomcat_pids()
    if (pids):
        subprocess.check_call(["xdg-open", "http://localhost:8080/jasperserver-pro"],
                        stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)
    else:
        cmd_ps()


def cmd_configure(db):
    configure_buildomatic(db)


def cmd_init_db():
    subprocess.check_call(["ant",
                     "create-js-db",
                     "build-js-ddl-pro",
                     "init-js-db-pro",
                     "create-sugarcrm-db",
                     "load-sugarcrm-db",
                     "create-foodmart-db",
                     "load-foodmart-db",
                     "run-production-data-pro"], cwd = ce_dir + "/buildomatic")


def assert_initialized():
    if (not os.path.isdir(ce_dir) or not os.path.isdir(pro_dir)):
        raise IOError("Cannot find ce and pro directories. Did you run init?")


def run_svn_command(svn_args):
    subprocess.check_call(["svn"] + svn_args + [ce_dir])
    subprocess.check_call(["svn"] + svn_args + [pro_dir])


def stop_gracefully(timeout):
    execute_catalina_action("stop")
    sys.stdout.write("Waiting for tomcat to stop")
    sys.stdout.flush()
    elapsed = 0 # number of seconds since shutdown initiated
    while (get_tomcat_pids() and elapsed <= timeout):
        time.sleep(1)
        elapsed += 1
        sys.stdout.write(".")
        sys.stdout.flush()

    print()


def get_tomcat_pids():
    catalina_main_class_arg = "org.apache.catalina.startup.Bootstrap"
    catalina_home_arg = "-Dcatalina.home=" + tomcat_home
    pids = []

    for proc in psutil.process_iter():
        if (proc.name == "java" \
                and catalina_main_class_arg in proc.cmdline \
                and catalina_home_arg in proc.cmdline):
            pids.append(str(proc.pid))
            # keep looking, might be multiple instances running

    return pids


def svn_checkout(branch_ce, branch_pro, svn_user):
    """checkout source"""
    svn_url_prefix = "https://" + svn_user + "@svnserver.jaspersoft.com/jasperserver"

    if (branch_ce.startswith("https://")):
        url_ce = branch_ce
    else:
        url_ce = svn_url_prefix + "/" + normalize_branch_name(branch_ce)

    if (branch_pro.startswith("https://")):
        url_pro = branch_pro
    else:
        url_pro = svn_url_prefix + "-pro/" + normalize_branch_name(branch_pro)

    subprocess.check_call(["svn", "checkout", url_ce, "ce"])
    subprocess.check_call(["svn", "checkout", url_pro, "pro"])


def normalize_branch_name(branch):
    """ensures that branch includes branches/ unless trunk"""
    if (branch != "trunk" and not branch.startswith("branches/")):
        return "branches/" + branch

    return branch;

def configure_buildomatic(db):
    check_db_type(db)
    """writes default_master.properties file"""
    with open(ce_dir + "/buildomatic/default_master.properties", "w") as f:
        write_app_server_section(f)
        write_db_section(f, db)
        write_source_section(f)


def write_app_server_section(f):
    if (env == "dev"):
        f.write("appServerType = tomcat7\n")
        f.write("appServerDir = " + tomcat_home + "\n")
    else:
        f.write("appServerType = skipAppServerCheck\n")


def write_db_section(f, db):
    if (env == "dev"):
        # devs run the app and the db on the same machine
        db_host = "localhost"
    else:
        db_host = "db"

    if (db == "pg"):
        f.write("dbType = postgresql\n")
        f.write("dbHost = " + db_host + "\n")
        f.write("dbUsername = postgres\n")
        f.write("dbPassword = postgres\n")
    elif (db == "mysql"):
        f.write("dbType = mysql\n")
        f.write("dbHost = " + db_host + "\n")
        f.write("dbUsername = root\n")
        f.write("dbPassword =\n")
    else:
        raise ValueError("Unknown db type " + db)

def check_db_type(db):
    if (db not in ["pg", "mysql"]):
        raise ValueError("Unknown db type " + db)


def write_source_section(f):
    f.write("maven = /usr/local/maven/bin/mvn\n")
    f.write("mvn-mirror=http://mvnrepo.jaspersoft.com:8081/artifactory/repo\n")
    f.write("js-path = " + ce_dir + "\n")
    f.write("js-pro-path = " + pro_dir + "\n")


def tweak_buildomatic_for_dev_env():
    """makes maven install sources into local repository"""
    searchString = '<arg value="clean"/>'
    for line in fileinput.input(ce_dir + "/buildomatic/bin/dev.xml", inplace = True):
        if (line.strip() == searchString):
            line = line.replace(searchString, searchString + '<arg value="source:jar-no-fork"/>')
        print(line, end = "")

def ensure_tomcat():
    download_tomcat()
    extract_tomcat()
    configure_tomcat()


def download_tomcat():
    distribution_url = "http://www.gtlib.gatech.edu/pub/apache/tomcat/tomcat-7/v" + _tomcat_ver + "/bin/apache-tomcat-" + _tomcat_ver + ".tar.gz"
    if (not os.path.isfile(tomcat_distribution_file)):
        os.makedirs(os.path.dirname(tomcat_distribution_file), exist_ok=True)
        print("Downloading tomcat " + _tomcat_ver + " from " + distribution_url)
        urllib.request.urlretrieve(distribution_url, tomcat_distribution_file, print_progress)
        print()


def extract_tomcat():
    if (not os.path.isdir(tomcat_home)):
        os.makedirs(tomcat_home)
        print("Extracting tomcat into " + tomcat_home)
        subprocess.check_call(["tar", "-xf", tomcat_distribution_file, "-C", tomcat_home, "--strip-components=1"])


def configure_tomcat():
    with open(tomcat_home + "/bin/setenv.sh", "w") as f:
        f.write(textwrap.dedent("""
            export CATALINA_OPTS="-agentlib:jdwp=transport=dt_socket,address=1044,server=y,suspend=n -Djavax.xml.soap.SOAPFactory=org.apache.axis.soap.SOAPFactoryImpl -Djavax.xml.transform.TransformerFactory=org.apache.xalan.processor.TransformerFactoryImpl -Djavax.xml.soap.SOAPConnectionFactory=org.apache.axis.soap.SOAPConnectionFactoryImpl -Djavax.xml.soap.MessageFactory=org.apache.axis.soap.MessageFactoryImpl -Djava.net.preferIPv4Stack=true -Xms1024m -Xmx2048m -XX:PermSize=32m -XX:MaxPermSize=512m -Xss2m -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled"
        """).strip().format(tomcat_home))


def print_progress(count, blockSize, totalSize):
    percent = int(count * blockSize * 100 / totalSize)
    sys.stdout.write("\r%3d%%" % percent)
    sys.stdout.flush()


def execute_catalina_action(action):
    subprocess.check_call([tomcat_home + "/bin/catalina.sh", action],
                    stdout = subprocess.DEVNULL, stderr = subprocess.DEVNULL)


def check_db():
    """checks if db is up"""
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result = s.connect_ex(("localhost", 5432))
    if (result != 0):
        raise IOError("DB is down")

    s.close()


def get_working_environment(args):
    if (args["--env"]):
        if (args["--env"] in env_list):
            return args["--env"]
        else:
            raise ValueError("Unknown environment " + args["--env"])
    return "dev"


# working environment
env_list = ["dev", "ci"]
env = ""
tomcat_home = os.getcwd() + "/tomcat"
tomcat_distribution_file = os.path.expanduser("~") + "/.cache/jst/apache-tomcat-" + _tomcat_ver + ".tar.gz"
ce_dir = os.getcwd() + "/ce"
pro_dir = os.getcwd() + "/pro"

class color:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

if (__name__ == "__main__"):

    args = docopt.docopt(__doc__, version = "0.1")

    env = get_working_environment(args)

    try:
        main(args)
    except Exception as e:
        print(color.FAIL + str(e) + color.ENDC)
        # traceback.print_exc()
        exit(1)
